.clearfix() {
    &:after {
        content: ".";
        display: block;
        clear: both;
        visibility: hidden;
        line-height: 0;
        height: 0;
    }
}
.box-sizing(@sizing: border-box) {
    -ms-box-sizing: @sizing;
    -moz-box-sizing: @sizing;
    -webkit-box-sizing: @sizing;
    box-sizing: @sizing;
}
.linear-gradient(@color: #F5F5F5, @start: #EEE, @stop: #FFF) {
    background: @color; /* old browsers */
    background: -webkit-gradient(linear, left bottom, left top, color-stop(0, @start), color-stop(1, @stop));
    background: -moz-linear-gradient(center bottom, @start 0%, @stop 100%);
    background: linear-gradient(top, @start, @stop);
}
.linear-gradient-double(@color: #F5F5F5, @start: #EEE, @mid: #f5f5f5, @stop: #FFF) {
    background: @color; /* old browsers */
    background: -webkit-gradient(linear, left bottom, left top, color-stop(0, @start), color-stop(0.5, @mid), color-stop(1, @stop));
    background: -moz-linear-gradient(center bottom, @start 0%, @mid 50%, @stop 100%);
    background: linear-gradient(top, @start, @mid 50%, @stop);
}
.box-shadow(@x-axis: 0, @y-axis: 1px, @blur: 3px, @color: black) {
    -webkit-box-shadow: @x-axis @y-axis @blur @color;
    -moz-box-shadow: @x-axis @y-axis @blur @color;
    box-shadow: @x-axis @y-axis @blur @color;
}
.box-shadow-inset(@x-axis: 0, @y-axis: 1px, @blur: 3px, @color: black) {
    -webkit-box-shadow: inset @x-axis @y-axis @blur @color;
    -moz-box-shadow: inset @x-axis @y-axis @blur @color;
    box-shadow: inset @x-axis @y-axis @blur @color;
}
.box-shadows(@shadow1, @shadow2) {
    -webkit-box-shadow: @shadow1, @shadow2;
    -moz-box-shadow: @shadow1, @shadow2;
    box-shadow: @shadow1, @shadow2;
}
.rounded(@radius: 2px) {
    -webkit-border-radius: @radius;
    -moz-border-radius: @radius;
    border-radius: @radius;
}
.top-rounded(@radius: 2px) {
    -webkit-border-top-left-radius: @radius;
    -webkit-border-top-right-radius: @radius;
    -moz-border-radius-topleft: @radius;
    -moz-border-radius-topright: @radius;
    border-top-left-radius: @radius;
    border-top-right-radius: @radius;
}
.border-bottom-right-radius(@radius: 2px) {
    -webkit-border-bottom-right-radius: @radius;
    -moz-border-radius-bottomright: @radius;
    border-bottom-right-radius: @radius;
    -webkit-background-clip: padding-box;
    -moz-background-clip: padding;
    background-clip: padding-box;
}
.user-select(@argument: none) {
    -webkit-user-select: @argument;
    -moz-user-select: @argument;
    -ms-user-select: @argument;
    -o-user-select: @argument;
    user-select: @argument;
}
.transition(...) {
    -webkit-transition: @arguments;
    -moz-transition: @arguments;
    -o-transition: @arguments;
    -ms-transition: @arguments;
    transition: @arguments;
}

/* selector mixin for defining N image siblings with proportional widths such that
   they fit in a figure - called recursively, so only needs to be added once with
   @cols equal to the maximum number of sibling images to support */
.img-dyncols(@cols, @maxwidth, @padding) when (@cols > 0) {
    @cols_plus_one: (@cols + 1);

    img:nth-child(1):nth-last-child(@{cols_plus_one}),
    img:nth-child(1):nth-last-child(@{cols_plus_one}) ~ img {
        max-width: (floor(@maxwidth/@cols - (@cols - 1)*2*@padding));
    }

    a:nth-child(1):nth-last-child(@{cols_plus_one}),
    a:nth-child(1):nth-last-child(@{cols_plus_one}) ~ a {
        img {
            max-width: (floor(@maxwidth/@cols - (@cols - 1)*2*@padding));
        }
    }

    .img-dyncols((@cols - 1), @maxwidth, @padding); // loop again
}
.img-dyncols(@cols, @maxwidth, @padding) when (@cols < 1) {
    loop: end;
}
